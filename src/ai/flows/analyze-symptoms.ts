// 'use server';
/**
 * @fileOverview An AI agent that analyzes patient symptoms and provides a preliminary diagnosis and risk assessment.
 *
 * - analyzeSymptoms - A function that handles the symptom analysis process.
 * - AnalyzeSymptomsInput - The input type for the analyzeSymptoms function.
 * - AnalyzeSymptomsOutput - The return type for the analyzeSymptoms function.
 */

'use server';

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeSymptomsInputSchema = z.object({
  symptoms: z.string().describe('The symptoms described by the patient, either via voice or text.'),
});
export type AnalyzeSymptomsInput = z.infer<typeof AnalyzeSymptomsInputSchema>;

const AnalyzeSymptomsOutputSchema = z.object({
  preliminaryDiagnosis: z.string().describe('The preliminary diagnosis generated by AI.'),
  riskAssessment: z.string().describe('The risk assessment generated by AI.'),
  confidenceScore: z.number().describe('The confidence score of the diagnosis (0-1).'),
});
export type AnalyzeSymptomsOutput = z.infer<typeof AnalyzeSymptomsOutputSchema>;

export async function analyzeSymptoms(input: AnalyzeSymptomsInput): Promise<AnalyzeSymptomsOutput> {
  return analyzeSymptomsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeSymptomsPrompt',
  input: {schema: AnalyzeSymptomsInputSchema},
  output: {schema: AnalyzeSymptomsOutputSchema},
  prompt: `You are an AI assistant that helps Community Health Workers (CHWs) assess patients.\n\nYou will receive a description of the patient\'s symptoms. Based on these symptoms, you will provide a preliminary diagnosis and a risk assessment. You will also provide a confidence score for the diagnosis, between 0 and 1.\n\nSymptoms: {{{symptoms}}}`,
});

const analyzeSymptomsFlow = ai.defineFlow(
  {
    name: 'analyzeSymptomsFlow',
    inputSchema: AnalyzeSymptomsInputSchema,
    outputSchema: AnalyzeSymptomsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
